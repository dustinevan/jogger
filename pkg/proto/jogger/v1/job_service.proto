syntax = "proto3";

package jogger.v1;

// JobService provides methods to manage remote jobs
service JobService {
  // Start runs a job on the server and responds with the job_id
  rpc Start(StartRequest) returns (StartResponse);
  // Stop stops a job that is running on the server. The server sends a
  // SIGTERM signal to the job and waits for it to exit. The job has 10 seconds
  // to exit before the server sends a SIGKILL signal to the job.
  rpc Stop(StopRequest) returns (StopResponse);
  // Status returns the status of a job
  rpc Status(StatusRequest) returns (StatusResponse);
  // Output streams the output of a job, including running jobs.
  rpc Output(OutputRequest) returns (stream OutputResponse);
}

// Request to start a job
message StartRequest {
  // The job to start
  Job job = 1;
}

// Job represents a command and arguments to run on the server.
message Job {
  // the command to run
  string cmd = 1;
  // the arguments to pass to the command
  repeated string args = 2;
}

// Response to starting a job
message StartResponse {
  // the job_id of the job that was started
  string job_id = 1;
}

// Request to stop a job
message StopRequest {
  // the job_id of the job to stop
  string job_id = 1;
}

// Response to stopping a job
message StopResponse {
  // the status of the job after stopping
  Status status = 1;
}

// Request to get the status of a job
message StatusRequest {
  // the job_id of the job to get the status of
  string job_id = 1;
}

// Response to getting the status of a job
message StatusResponse {
  // the status of the job
  Status status = 1;
}

// JobStatus represents the state a job is in
// States after Running are all states where a process
// is no longer running on the server.
enum Status {
  //STATUS_UNSPECIFIED is an invalid state
  STATUS_UNSPECIFIED = 0;
  //RUNNING: A process is running on the server for the reference job
  RUNNING = 1;
  //STOPPED: The job exited after receiving a SIGTERM.
  STOPPED = 2;
  //KILLED: The job was sent a SIGTERM and failed to exit before a
  // timeout. It was sent a SIGKILL. Jobs with this status may have
  // left data or resources in an inconsistent state.
  KILLED = 3;
  //FAILED: The job exited with status > 0 without being sent a SIGTERM
  // or SIGKILL
  FAILED = 4;
  //COMPLETED: The job exited with status = 0
  COMPLETED = 5;
}

// Request to get the output of a job
message OutputRequest {
  // the job_id of the job to get the output of
  string job_id = 1;
}

// Response to getting the output of a job
message OutputResponse {
  OutputData data = 1;
}

// JobOutputData is a chunk of data returned from a job output stream
message OutputData {
  // a chunk of data.
  // this is the combination of STDIN and STDERR outputs
  // This is currently limited server-side to 64KB based on the tcp max packet size
  // this will need to be revisited to improve performance.
  bytes data = 1;
}

